<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Celic">
    <!--Base Styles In InputBox-->
    <Style x:Key="txtBlockDefaultStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Margin" Value="2"/>
    </Style>
    <!--Стандартный стиль для TextBlock во всплывающей подсказке-->
    <Style x:Key="txtBlockToolTipStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource txtBlockDefaultStyle}">
        <Setter Property="TextWrapping" Value="WrapWithOverflow"/>
        <Setter Property="MinHeight" Value="20"/>
    </Style>
    <!--Стандартный стиль для TextBox в вводе данных-->
    <Style x:Key="txtBoxBaseStyle" TargetType="{x:Type TextBox}">
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Padding" Value="0,-2,0,0"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="MaxHeight" Value="20"/>
        <Setter Property="MinWidth" Value="100"/>
        <Setter Property="MaxWidth" Value="200"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
    </Style>
    <!--Стандартный стиль TextBlock в вводе данных-->
    <Style x:Key="txtBlockBaseStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Margin" Value="0,2,2,0"/>
        <Setter Property="MaxWidth" Value="400"/>
        <Setter Property="MinWidth" Value="100"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="TextAlignment" Value="Right"/>
        <Setter Property="TextWrapping" Value="WrapWithOverflow"/>
    </Style>
    <ControlTemplate x:Key="CircleButtonStyle" TargetType="{x:Type ButtonBase}">
        <Border x:Name="border" CornerRadius="10" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="border" Value="#FFBEE6FD"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                <Setter Property="Foreground" Value="#FF838383"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="ButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="20"/>
        <Setter Property="Background" Value="Transparent"/>
    </Style>

    <Style x:Key="PathStyle" TargetType="{x:Type Path}">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Fill" Value="Black"/>
    </Style>

    <Style x:Key="HeaderStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="TextWrapping" Value="WrapWithOverflow"/>
    </Style>

    <Style x:Key="BasePositionStyle" TargetType="{x:Type ContentPresenter}">
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
    </Style>

    <!--Стандартный стиль значения величины  TextBlock в выводе данных-->
    <Style x:Key="txtBlockValueStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource txtBlockBaseStyle}">
        <Setter Property="MaxHeight" Value="20"/>
        <Setter Property="TextAlignment" Value="Left"/>
        <Setter Property="Margin" Value="10,0,0,0"/>
    </Style>
    <!--Стандартный стиль наименования величины TextBlock в выводе данных-->
    <Style x:Key="txtBlockNameStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource txtBlockToolTipStyle}">
        <Setter Property="TextAlignment" Value="Right"/>
    </Style>
    <Style x:Key="buttonDefaultStyle" TargetType="{x:Type Button}">
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Margin" Value="2,4"/>
    </Style>
    <Style x:Key="removeButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource buttonDefaultStyle}">
        <Setter Property="Command" Value="{Binding RemoveCommand}"/>
    </Style>
    <Style x:Key="removeSelectionButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource buttonDefaultStyle}">
        <Setter Property="Content" Value="Отменить выделение"/>
        <Setter Property="Command" Value="{Binding RemoveSelectionCommand}"/>
    </Style>
    <Style  x:Key="swapButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource buttonDefaultStyle}">
        <Setter Property="Content" Value="Поменять столбцы местами"/>
        <Setter Property="Command" Value="{Binding SwapCommand}"/>
    </Style>
</ResourceDictionary>
